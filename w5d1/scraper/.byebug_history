quit
parts.count
quit
last_page
per_page
total
quit
parts_listed.count
quit
parts[0]
parts[0..5]
parts
quit
part[:product_item]
part[:price]
part[:product_item]
c
part[:sku]
part[:price]
part[:product_item]
continue
listItem.css('span.gls-location').text
listItem.css('span.gls-location).text
listItem.css('span.price').text
listItem.css('span.price')[0].text
listItem.css('span.price).text
listItem.count
itemCards.css('span.price')[3].text
listItem.css('span.price')[3].text
listItem.css('span.price')[2].text
listItem.css('span.price')[0].text
listItem.css('span.price')[0..10].text
listItem.css('span.price').text
listItem.css('a.product-item-link')[0...10].text
listItem.css('a.product-item-link')[0].text
listItem.css('a.product-item-link').text
!item.include?("MSRP")
item = listItem.css('span.price').collect(&:text)
listItem.css('span.price').collect(&:text) unless listItem.css('span.price').collect(&:text).include?("MSRP")
listItem.css('span.price').collect(&:text) unless listItem.css('span.price').collect(&:text).inlude?("MSRP")
listItem.css('span.price').collect(&:text)
listItem.css('span.price').text
display prices
n
display price_list
quit
display price_list
n
quit
clear
listItem.css('span.price').text
listItem.css('span.price')
quit
listItem.css('span.price')
parsed_page.css('li.item.product.product-item')
itemPrice.text
quit
itemPrice.each do |i| puts i.price }
itemPrice.text.each { |i| puts i.price }
itemPrice.text.each do |i| puts i.price }
itemPrice.text
quit
itemPrice.text
quit
itemPrice.text
quit
itemPrice.text[3]
itemPrice.text
quit
itemPrice.text
itemPrice
quit
itemPrice.text
quit
itemPrice.text
quit
itemPrice.text.split("\n\n").join("").split("MSRP").join("").split("\n").join(" ")
itemPrice.text.split("\n\n").join("").split("MSRP").join("")
itemPrice.text.split("\n\n").join("")
itemPrice.text.split("\n\n")
itemPrice.text.split("\n\n\n")
itemPrice.text.split("\n\n")
(itemPrice.text).each do { |i| puts i }
itemPrice.text
n
exit
display priceList
n
s
n
exit
itemPrice[0..-1].each_with_index { |price, idx| priceList << price[idx] } 
exit
itemPrice[0..-1].text
itemPrice.text
quit
itemPrice.text
itemCards.text
itemPrice
url
parsed_page
quit
firstItem.css('span.price')
firstItem = itemCards.first
itemCards.first
itemCards.count
exit
parsed_page.css('a.product-item-link')
clear
parsed_page.css('a.product-item-link')
parsed_page.css('div.page-wrapper')
parsed_page.css('div.products wrapper grid products-grid')
parsed_page.css('div.product-item-link')
quit
parsed_page
url
quit
parsed_page
unparsed_page
url
exit
clear
parsed_page
unparsed_page
url
